<!doctype html>
<html lang=pl>
<head>
  <meta charset=utf-8>
  <title>Whale Trade Bot</title>

  <script
        src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
        crossorigin="anonymous"></script>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
  <script src="https://canvasjs.com/assets/script/canvasjs.stock.min.js"></script>
  <!-- <link rel="stylesheet" href="style.css"> this can't load inside serverless -> either we inline or surve via backend route -->


  <script type="text/javascript">
    dashboard_data = { sum:null, ticks:[] };

    // our entry point
    $( document ).ready( () => {
        console.log( "document loaded" );

        fetch_url( '?cmd=get_config' ).then( (data) => { window.config = data;} )
        .then( () => {
          let chart = initialize_chart();
          chart_loop( chart, 0 );
        });


        // let limit = 3;
        // let count = 0;
        // while( count < limit && ( !dashboard_data.sum || dashboard_data.sum.api_count == 100)  )
        // {
        //   count++;
        // }


      // var dataCount = 700, ystart = 50, interval = 1000, xstart = (currentDate.getTime() - (700 * 1000));
      // updateChart(xstart, ystart, dataCount, interval);
      
      // function updateChart(xstart, ystart, length, interval) {
      //   var xVal = xstart, yVal = ystart;
      //   for(var i = 0; i < length; i++) {
      //     yVal = yVal +  Math.round(5 + Math.random() *(-5-5));
      //     yVal = Math.min(Math.max(yVal, 5), 90);
      //     dataPoints.push({x: xVal,y: yVal});
      //     xVal += interval;
      //   }
      //   if(!rangeChangedTriggered) {
      //       stockChart.options.navigator.slider.minimum = new Date(xVal - (90 * 1000));
      //   }
      //   stockChart.options.charts[0].axisY.stripLines[0].value =  dataPoints[dataPoints.length - 1].y;
      //   stockChart.options.charts[0].axisY.stripLines[0].label = stockChart.options.charts[0].axisY.stripLines[0]["value"];
      //   xstart = xVal;
      //   dataCount = 1;
      //   ystart = yVal;
      //   stockChart.render();
      //   setTimeout(function() { updateChart(xstart, ystart, dataCount, interval); }, 1000);
      // }



    });
   

    async function chart_loop( chart, loop_count )
    {
        let prices = await get_binane_data();
        populate_binance_data(chart, prices)
        .then( () => {
          fetch_bucket_data(chart)
          .then( () => {
            chart.chart.render();

            if( loop_count == 0)
            {
              var ema = calculateEMA(chart.data["inflow"] , 7);
              chart.chart.charts[3].addTo("data", {type: "line", name: "Inflows EMA", showInLegend: true, axisYType: "secondary",
                                                    yValueFormatString: "#,###", dataPoints: ema, color:"green"});
              var ema = calculateEMA(chart.data["outflow"] , 7);
              chart.chart.charts[3].addTo("data", {type: "line", name: "Outflows EMA", showInLegend: true, axisYType: "secondary",
                                                    yValueFormatString: "#,###", dataPoints: ema, color:"red"});

              var ema = calculateEMA(chart.data["flow_vol"] , 7);
              chart.chart.charts[3].addTo("data", {type: "line", name: "EMA", showInLegend: true, axisYType: "secondary",
                                                    yValueFormatString: "#,###", dataPoints: ema, color:"blue"});



              chart.chart.render();
            }

            // setup updates every 10sec
            chart_mini_loop( chart, loop_count )
          });
        });
    }

    function chart_mini_loop( chart, loop_count )
    {
        // see if we RT toggle is set
        let rt_enabled = $("#rt_updates_toggle")[0].checked;
        if( ! rt_enabled )
          $("#rt_updates_toggle_lbl").text( "Disabled" );
        else
        {
          $("#rt_updates_toggle_lbl").text( "Enabled" );
          update_mark_price( chart );
          if( loop_count % 10 == 0 ) update_predictions(); // don't do this every time because scores don't change so much and its expensive
          get_binane_data("10m").then( (latest_prices) => {
            populate_binance_data(chart, latest_prices)

              var ema12 = calculateEMA(chart.data["price"], 12),
                  ema26 = calculateEMA(chart.data["price"], 26),
                  macd = [], ema9, hist =[];
              for(var i = 0; i < ema12.length; i++) {
                macd.push({x: ema12[i].x, y: (ema12[i].y - ema26[i].y)});
              }
              var ema9 = calculateEMA(macd, 9);
              for(var i = 0; i < ema12.length; i++)
              {
                let score = (macd[i].y - ema9[i].y);
                hist.push({x: ema12[i].x, y: score, color: score > 0 ? "green" : "red" });
              }

              if( loop_count == 0 )
              {
                chart.chart.charts[2].addTo("data", {axisYType: "secondary", type: "line", name: "Signal", showInLegend: true, dataPoints: ema9});
                chart.chart.charts[2].addTo("data", {axisYType: "secondary", type: "line", name: "MACD", showInLegend: true, dataPoints: macd});
                chart.chart.charts[2].addTo("data", {axisYType: "secondary", name: "Hist", showInLegend: true, dataPoints: hist});
              }
              else
              {
                chart.chart.charts[2].set("data", [
                  {axisYType: "secondary", type: "line", name: "Signal", showInLegend: true, dataPoints: ema9},
                  {axisYType: "secondary", type: "line", name: "MACD", showInLegend: true, dataPoints: macd},
                  {axisYType: "secondary", name: "Hist", showInLegend: true, dataPoints: hist}
                  ]
                );
              }


          });
        }

        setTimeout( () => {
          chart_mini_loop( chart, ++loop_count );
        }, 1000);
    }

    function update_predictions()
    {
        fetch_url( "?cmd=get_price_pred" )
        .then( (pred) => {
          console.log( pred );
          $("#model-label").html( pred.model + " (" + pred.ppv + ")" );
          
          let color_class = "green";
          if ( pred.pred < 0.5 )
            color_class = "red";
          $("#pred-score").html( pred.pred + " (" + pred.metric + ")" );
          $("#pred-score").addClass( color_class );
        });
    }


    // SMa doesn't seem to be working (at least not out ofthe box) because of too many 0s
    function calculateEMA(dps,count) {
      var k = 2/(count + 1);
      var emaDps = [{x: dps[0].x, y: dps[0].y.length ? dps[0].y[3] : dps[0].y}];
      for (var i = 1; i < dps.length; i++) {
        emaDps.push({x: dps[i].x, y: (dps[i].y.length ? dps[i].y[3] : dps[i].y) * k + emaDps[i - 1].y * (1 - k)});
      }
      return emaDps;
    }

    function initialize_chart()
    {
      var data_points = { 
          "price": [],
          "vol": [],
          "nav": [],
          "inflow": [],
          "outflow": [],
          "exchange_vol": [],
          "flow_vol": [],
          "macd": [],
          "signal": [],
          "hist": []
        };

      //  queue of the last few entries in the data + RT copy of very latest stuff for the current frame
      var head_queue = {};
      var rt_queue = {};
      // let head_time = 1600490920000; //20200919 // most recent time frame that we plot - TODO generate value dynamically
      // let head_time = (Date.now() - (3600 * 2 * 1000) );
      let head_time = (Date.now() - (120 * 1000) ); //subtract ~1frame
      let is_initial_render_done = false;

      // https://canvasjs.com/javascript-stockcharts/
      let currentDate = new Date(), rangeChangedTriggered = false;
      var stockChart = new CanvasJS.StockChart("chartContainer",{
        exportEnabled: true,
        theme: "light2",
        title:{ text:"" },
        rangeChanged: function(e) { rangeChangedTriggered = true; },
        charts: [

        { 
          toolTip: { shared: true },
          axisX: {
            lineThickness: 5,
            tickLength: 0,
            labelFormatter: function(e) { return ""; },
            crosshair: {
              enabled: true,
              snapToDataPoint: true,
              labelFormatter: function(e) { return "" }
            }
          },
          axisY2: {
            title: "BTC Price",
            prefix: "BTC",
            stripLines: [{
              showOnTop: true,
              lineDashType: "dash",
              color: "blue",
              labelFontColor: "blue",
              labelFontSize: 14
            }]
         },
          legend: {
            verticalAlign: "top",
            horizontalAlign: "right"
          },
          data: [{
            name: "Price (in USDT)",
            yValueFormatString: "##,###.##",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            type: "candlestick",
            risingColor: "green",
            fallingColor: "red",
            dataPoints : data_points["price"]
          }]
        },

        {
          height: 100,
          toolTip: {
            shared: true
          },
          axisX: {
            crosshair: {
              enabled: true,
              snapToDataPoint: true
            }
          },
          axisY2: {
            prefix: "BTC",
            title: "BTC Vol"
          },
          legend: {
            horizontalAlign: "right"
          },
          data: [{
            yValueFormatString: "##,###.##",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "BTC",
            dataPoints : data_points["vol"]
          }]
        },

        {
          height: 200,
          toolTip: { shared: true },
          axisX: { crosshair: { enabled: true, snapToDataPoint: true } },
          axisY: { prefix: "", title: "MACD" },
          legend: { horizontalAlign: "right" },
          data: [{
            yValueFormatString: "###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "MACD",
            dataPoints : data_points["macd"]
          },
          {
            yValueFormatString: "###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "Signal",
            dataPoints : data_points["signal"]
          },{
            yValueFormatString: "###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "Hist",
            dataPoints : data_points["hist"]
          }]
        },

        {
          height: 200,
          toolTip: { shared: true },
          axisX: { crosshair: { enabled: true, snapToDataPoint: true } },
          axisY: { prefix: "USD", title: "USD Vol" },
          legend: { horizontalAlign: "right" },
          data: [{
            yValueFormatString: "$###,###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "USDT Inflow",
            dataPoints : data_points["inflow"]
          },
          {
            yValueFormatString: "$###,###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "USDT Outflow",
            dataPoints : data_points["outflow"]
          },{
            yValueFormatString: "$###,###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "USDT Exchange Vol",
            dataPoints : data_points["exchange_vol"]
          }]
        },

        {
          height: 200,
          toolTip: { shared: true },
          axisX: { crosshair: { enabled: true, snapToDataPoint: true } },
          axisY: { prefix: "USD", title: "USD Vol" },
          legend: { horizontalAlign: "right" },
          data: [
          {
            yValueFormatString: "$###,###",
            xValueFormatString: "MMM DD, YYYY HH:mm:ss",
            axisYType: "secondary",
            name: "USDT Flow Total",
            dataPoints : data_points["flow_vol"]
          }]
        }


        ],

        navigator: {
          data: [{
            color: "grey",
            dataPoints: data_points["nav"]
          }],
          slider: {
            minimum: new Date( head_time - (5400 * 1000) ) //90min default slider selection
          }
        },
        rangeSelector: {
          enabled: false
        }
      });

      return {"chart": stockChart, "data": data_points, is_initial_render_done:is_initial_render_done,
              "rt_queue": rt_queue, "head_queue": head_queue, "head_time": head_time };
    }

    async function update_mark_price( chart_obj )
    {
        let api_url = "https://fapi.binance.com/fapi/v1/premiumIndex";
        let mark_price_obj = await fetch_url( api_url, {"symbol": "btcusdt"} )

        // chart_obj.chart.render();
        let price = mark_price_obj["markPrice"];
        $("#live-price").html( Number(price).toFixed(1) );
        // console.log( "mark_price_obj:", mark_price_obj, price );
        // console.log( chart_obj.chart.charts[0].axisY2[0] );
        chart_obj.chart.charts[0].axisY2[0].options.stripLines[0].value = price;
        chart_obj.chart.charts[0].axisY2[0].options.stripLines[0].label = Number(price).toFixed(1);
        chart_obj.chart.render();
    }

    async function get_binane_data( range = "24h" )
    {
        // https://fapi.binance.com/fapi/v1/continuousKlines?pair=btcusdt&interval=5m&contractType=PERPETUAL
        let api_url = "https://fapi.binance.com/fapi/v1/continuousKlines";
        let config = window.config;
        let prices = [];
        
        // the API gets only ~8h of data per call, so we loop over
        let end_timestamp = Math.floor(Date.now());
        let start_timestamp = end_timestamp - config.DEFAULT_CHART_LENGTH; //24h
        if( range == "10m" )
          start_timestamp = end_timestamp - config.DEFAULT_CHART_UPDATE_LENGTH; //10min
        
        // console.log( start_timestamp, "<", end_timestamp);
        while( start_timestamp < end_timestamp )
        {
          let chunk_end_timestamp = start_timestamp + config.BINANCE_FETCH_SIZE;
          // console.log( start_timestamp + config.BINANCE_FETCH_SIZE, end_timestamp );
          let params = {"pair":"btcusdt", "interval":"1m", "contractType":"PERPETUAL", 
                      "startTime": start_timestamp, "endTime": chunk_end_timestamp };
          let new_prices = await fetch_url( api_url, params )
          prices = [...prices, ...new_prices ];
          start_timestamp += config.BINANCE_FETCH_SIZE;
        }
        return prices;
    }

    async function populate_binance_data( chart_obj, prices )
    {
        // update head queue with last ~10 entries of the price data using timestamp as the key
        // for(let entry of prices.slice(-10) )
        // {
        //   let key = entry[0];
        //   chart_obj.head_queue[key] = entry;
        // }
        for (let entry of prices ) // the entries are in reverse chronological order
        {
          // same data again
          if( chart_obj.is_initial_render_done && entry[0] < chart_obj.head_time ) //ignore 
            continue;
          // initial data or new latest data
          if( entry[0] != chart_obj.head_time ) //insert
          {
            let d = new Date( entry[0] );
            chart_obj.data["price"].push({x: d, //open time
                              y: [Number(entry[1]),  //open
                                  Number(entry[2]),  //high
                                  Number(entry[3]),  //low
                                  Number(entry[4])   //close
                                ],
                              color: entry[1] < entry[4] ? "green" : "red"
                            });
            chart_obj.data["vol"].push({x: d, y: Number(entry[5]), color: entry[1] < entry[4] ? "green" : "red"});
            chart_obj.data["nav"].push({x: d, y: Number(entry[4] )}); // close
            // console.log( "price length after push", chart_obj.data["price"].length );
          }
          // update on latest data
          if( entry[0] == chart_obj.head_time )//update
          {
            // console.log( "price length on update", chart_obj.data["price"].length );
            let i = chart_obj.data["price"].length-1;
            let row = chart_obj.data["price"].slice(-1)[0];
            let y = [ Number(entry[1]), Number(entry[2]), Number(entry[3]), Number(entry[4]) ]
            let color = entry[1] < entry[4] ? "green" : "red";
            // console.log("row:", row.y );
            // console.log("y:", y );

            // using slice returns a ref!
            chart_obj.data["price"][i].y = y
            chart_obj.data["price"][i].color = color;
            chart_obj.data["vol"][i].y = Number(entry[5])
            chart_obj.data["vol"][i].color = entry[1] < entry[4] ? "green" : "red";
            chart_obj.data["nav"][i].y = Number(entry[4]);
          }
          
          if( entry[0] > chart_obj.head_time )
            chart_obj.head_time = entry[0];
        }

        // chart_obj.chart.render();
        // console.log( "post update:", chart_obj.data["price"].slice(-1)[0] );
        // chart_obj.chart.navigator.slider.maximum = new Date( chart_obj.head_time );
        
        chart_obj.chart.render();
        chart_obj.chart.navigator.slider.minimum = new Date( chart_obj.head_time - (600 * 1000) );
        chart_obj.is_initial_render_done = true;
        prices = []; //dealoc?
    }

    async function fetch_bucket_data( chart_obj )
    {
      let config = window.config;
      let url = '?cmd=get_db_buckets';
      // start_timestamp, end_timestamp
      let end_timestamp = Math.floor(Date.now()/1000);
      let start_timestamp = end_timestamp - config.DEFAULT_CHART_LENGTH; //24h

      // console.log( "dashboard state:", dashboard_data.sum);
      if( dashboard_data.sum ) url += "&cursor=" + dashboard_data.sum.api_cursor;
      url += "&start_timestamp=" + start_timestamp + "&end_timestamp=" + end_timestamp;
      let data = await fetch_url(url );
      concord_front( data );
      populate_bucket_data( data, chart_obj );
      populate_bucket_data2( data, chart_obj );
    }

    function populate_bucket_data( data, chart_obj )
    {
      // console.log(data);
      for(let entry of data.buckets_timeseries_exchanges )
      {
        // console.log( entry );
        let d = new Date( entry.timestamp );
        chart_obj.data["inflow"].push({x: d, y: entry.inflow, color: "green"});
        chart_obj.data["outflow"].push({x: d, y: entry.outflow, color: "red"});
        // chart_obj.data[5].push({x: d, y: entry.vol, color: "blue"});
        
      }
    }

    // TODO - refactor!
    function populate_bucket_data2( data, chart_obj )
    {
      // console.log(data);
      for(let entry of data.buckets_timeseries_total )
      {
        // console.log( entry );
        let d = new Date( entry.timestamp );
        chart_obj.data["flow_vol"].push({x: d, y: entry.vol, color: "blue"});
        // chart_obj.data[6].push({x: d, y: entry.net, color: entry.neet > 0 ? "green" : "red"});
        
      }
    }

    async function fetch_url( url, query = null )
    {
      if( query )
      {
        if( url.slice(-1) != "?" )
          url += "?";
        for( let key in query )
        {
          url += key + "=" + query[key] + "&";
        }
      }
      // console.log("fetching", url);
      return await fetch( url )
        .then(response => response.json())
        .then(data => {
          return data;
        }); 
    }


    function concord_front( data )
    {
        dashboard_data.ticks.push( data );
        let d = dashboard_data.sum;
        if( ! d )
        {
          d = data;
          d.api_count_total = data.api_count;
        }
        else
        {
          console.log( "concording data" );
          // use the latest data segment to update our summary DS
          d.inflow += data.inflow;
          d.outflow += data.outflow;
          d.intraflow += data.intraflow;

          d.api_cursor = data.api_cursor;
          d.api_count = data.api_count;
          d.api_count_total += data.api_count;
          
          // charts data was created in the same loop as buckets, so we should be able to concord both in the same loop
          data.sorted_totals.forEach( (item, index) => {
            let key_index = key_in_obj(item.bucket, d.sorted_totals, "bucket" );
            if( key_index < 0 )
            {
              d.sorted_totals.push( item );
              d.chart_data.push( data.chart_data[index] );
            }
            else
            {
              item.totals.forEach((target_item, target_index) => {
                let target_key_index = key_in_obj(target_item.target, d.sorted_totals[ key_index ], "target" );
                if( target_key_index < 0 )
                {
                  d.sorted_totals[ key_index ].push( target_item );
                  d.chart_data[ key_index ].x.push( data.chart_data[index].x[target_index] );
                  d.chart_data[ key_index ].y.push( data.chart_data[index].y[target_index] );
                }
                else
                {
                  d.sorted_totals[ key_index ][ "amount" ] += target_item.amount;
                  d.chart_data[ key_index ].y[target_index] += data.chart_data[index].y[target_index]; 
                }
              });
            }

          });

        }

        console.log( d );
        dashboard_data.sum = d;

        // keeping the template and the rendered html seperate lets us be able to rerender the element later on      
        render( dashboard_data.sum, '#tp-bucket-list', '#buckets-table' );
        render( dashboard_data.sum, '#tp-flow-stats', '#flow-stats' );

        Plotly.newPlot('buckets-chart', dashboard_data.sum.chart_data, {barmode: 'group'} );

    }

    function key_in_obj( key, sorted_totals, obj_attribute_name )
    {
      sorted_totals.forEach( (item, index) => {
        if( item[obj_attribute_name] == key )
          return index; //what if this is the 0th entry???
      });
      return -1;
    }

    function render( data, template_id, target_id )
    {
      Handlebars.registerHelper('format_number', function(value) {
          // return value.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
          return (value).toLocaleString('en-EN', {maximumSignificantDigits:3, maximumFractionDigits: 0} );
      });

      if( ! target_id ) target_id = template_id;
      var template = $(template_id).html();
      var renderer = Handlebars.compile(template);
      let rendered = renderer( data );
      $(target_id).html( rendered );

    }




  </script>

</head>
<body>

<h1>Whale Trade</h1>

RT Refresh: <input type="checkbox" id="rt_updates_toggle" value="Checked" checked>
<label id="rt_updates_toggle_lbl" for="rt_updates_toggle">Enabled</label><br>

<h3 id="live-price"></h3>
<div id="model-info" class="inline">
  Model:
    <div id="model-label" class="inline"></div>
  <br/>
  Predictions:
    <div id="pred-score" class="inline"></div>
</div>

<div id="chartContainer" style="height: 1200px; width: 100%;"></div>

<br/>

<!-- Total flows in the last 24 hours:
<div id="flow-stats-exchange" ></div> -->
Exchange flows in the last 24 hours:
<div id="flow-stats" ></div>
<div id="buckets-chart"></div>

<br/>

<div id="buckets-table"></div>




<!-- Templates for client-side rendering-->
<template id="tp-flow-stats" >
  Total Inflow: {{format_number inflow }} | 
  Outflow: {{format_number outflow }} | 
  Intraflow: {{format_number intraflow }}
</template>

<template id="tp-bucket-list">
  {{#each sorted_totals}}
    <div class="exchange">
      <h4>{{ this.bucket }}</h4>
      {{#each this.totals }}
        <div>{{ this.target }} : {{ this.amount }}</div>
      {{/each}}
    </div>
  {{/each}}
</template>



</body>
<style>

  .inline {
    display: inline-block;
  }

  body {
    background: #EEF;
  }

  .green {
    background: #080;
  }

  .red {
    background: red;
  }

</style>
</html>